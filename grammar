t := fun t -> t
	 let t = t in t
	 let rec t = t in t
	 if t then t else t
	 var
	 const
	 op t
	 t op t
	 t t
	 (t)
	 (t,t)

Symboles non terminaux : {E, F, G, H}
Symboles terminaux : {var, const, let, in, if, then, else, fun, ->, op0, op1, op2, (, ), rec}
Symbole de départ : E

Priorité du plus prioritaire au moins prioritaires
{>,>=,<,<=}
{+,-}
{%,/,*}
Applications et opérateurs préfixes {fst,snd,-}

Derivations :
E -> | F
	 | let var = E in E
	 | if E then E else E
	 | fun var -> E
	 | let rec var = E in E
	 | E op F
	
F_1 -> | F_2
	   | F_1 op F_2

...

F_k -> | F_(k+1)
	   | F_k op F_(k+1)
	
...

F_n -> | G
	   | op F_n
	   | H I // Application

G -> const
	| var
	| (E)
	| (E,E)
